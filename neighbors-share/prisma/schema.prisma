generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite" // change to "postgresql" in production
  url      = env("DATABASE_URL")
}

model User {
  id                   String          @id @default(cuid())
  name                 String?
  email                String          @unique
  image                String?
  createdAt            DateTime        @default(now())
  updatedAt            DateTime        @updatedAt
  postalCode           String?
  city                 String?
  country              String?
  lat                  Float?
  lng                  Float?
  items                Item[]
  requestsAsBorrower   BorrowRequest[] @relation("BorrowerRequests")
  requestsAsLender     BorrowRequest[] @relation("LenderRequests")
  messages             Message[]
  reviewsGiven         Review[]        @relation("ReviewsGiven")
  reviewsRecvd         Review[]        @relation("ReviewsRecvd")
  accounts             Account[]
  sessions             Session[]
}

model Item {
  id          String         @id @default(cuid())
  ownerId     String
  owner       User           @relation(fields: [ownerId], references: [id])
  title       String
  description String
  category    String         // use string instead of enum for SQLite
  condition   String
  photos      String         // JSON string of URLs
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  lat         Float?
  lng         Float?
  postalCode  String?
  isActive    Boolean        @default(true)
  requests    BorrowRequest[]
}

model BorrowRequest {
  id            String        @id @default(cuid())
  itemId        String
  item          Item          @relation(fields: [itemId], references: [id])
  borrowerId    String
  borrower      User          @relation("BorrowerRequests", fields: [borrowerId], references: [id])
  lenderId      String
  lender        User          @relation("LenderRequests", fields: [lenderId], references: [id])
  startDate     DateTime
  endDate       DateTime
  status        String        @default("PENDING") // use string instead of enum for SQLite
  messageThread MessageThread?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model MessageThread {
  id        String        @id @default(cuid())
  requestId String        @unique
  request   BorrowRequest @relation(fields: [requestId], references: [id])
  messages  Message[]
  createdAt DateTime      @default(now())
}

model Message {
  id        String        @id @default(cuid())
  threadId  String
  thread    MessageThread @relation(fields: [threadId], references: [id])
  senderId  String
  sender    User          @relation(fields: [senderId], references: [id])
  content   String
  createdAt DateTime      @default(now())
}

model Review {
  id         String   @id @default(cuid())
  requestId  String   @unique
  reviewerId String
  reviewer   User     @relation("ReviewsGiven", fields: [reviewerId], references: [id])
  revieweeId String
  reviewee   User     @relation("ReviewsRecvd", fields: [revieweeId], references: [id])
  rating     Int
  comment    String?
  createdAt  DateTime @default(now())
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}